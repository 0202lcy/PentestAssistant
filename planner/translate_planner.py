from semantic_kernel import Kernel
from semantic_kernel.orchestration.context_variables import ContextVariables

from log import logger
from planner.base import Plan, Planner
from retrieval import Retrieval

PROMPT = """
你是一个机器人，并且熟练掌握 Nmap 网络探测工具
你的能力是根据 Nmap 工具的扫描结果[输入]，使用中文对扫描结果进行翻译到[输出]
下面是一个翻译的例子：
[输入]
# Nmap 7.80 scan initiated Thu Jan 11 09:07:48 2024 as: nmap -p0-65535 -T5 -oN ./nmap_res/open_port_scan1704964068.2562544.txt 222.20.126.167
Nmap scan report for c402 (222.20.126.167)
Host is up (0.0000040s latency).
Not shown: 65521 closed ports
PORT STATE SERVICE
22/tcp open ssh
5044/tcp filtered lxi-evntsvc
5601/tcp filtered esmagent
8001/tcp open vcom-tunnel
8100/tcp filtered xprint-server
9200/tcp filtered wap-wsp
9300/tcp filtered vrace
9600/tcp filtered micromuse-ncpw
9906/tcp filtered unknown
27017/tcp open mongod
34523/tcp open unknown
37483/tcp open gdrive-sync
48081/tcp open unknown
50000/tcp filtered ibm-db2
50589/tcp open unknown
# Nmap done at Thu Jan 11 09:07:50 2024 -- 1 IP address (1 host up) scanned in 2.49 seconds

[输出]
Nmap 扫描报告：
目标主机：222.20.126.167
Host 状态：在线（响应时间为 0.0000040 秒）
未显示的端口：65521 个关闭端口
开放端口：
22/tcp - SSH
5601/tcp - VCOM 隧道
8001/tcp - XPrint Server
8100/tcp - 过滤 xprint-server
9200/tcp - 过滤 WAP-WSP
9300/tcp - 过滤 vrace
9600/tcp - 过滤 Micromuse NCPW
9906/tcp - 未知
27017/tcp - MongoDB
34523/tcp - 未知
37483/tcp - G Drive 同步
48081/tcp - 未知
50000/tcp - IBM DB2（过滤）
50589/tcp - 未知
扫描完成于 Thu Jan 11 09:07:50 2024，共计 1 个IP地址（1 个主机在线），耗时 2.49 秒。

[输入]
{{$input}}
[输出]
"""


class TranslatePlanner(Planner):

    def __init__(self,
                 kernel: Kernel,
                 skill_name: str,
                 reranker: Retrieval = None) -> None:
        super().__init__(kernel, skill_name, reranker)
        self.planner = kernel.create_semantic_function(PROMPT,
                                                       max_tokens=500,
                                                       temperature=0.8)

    async def create_plan_async(self, goal: str) -> Plan | None:
        logger.info(f": Translate input - {repr(goal)}")

        # Create the context for the planner
        context = ContextVariables()
        # Add the input to the context
        context["input"] = goal
        response = await self.planner.invoke_async(variables=context)

        # extract result from llm's response
        # response is end as "[end of text]"
        result = response.result.split("[end of text]")[0].split("[输出]")[-1]

        logger.info(f": Translate result - {repr(result)}")

        return Plan(prompt=PROMPT, goal=goal, generated_plan=result)

    async def execute_plan_async(self, plan: Plan) -> str:
        # translate Nmap to WEBSDS
        return plan.generated_plan.replace("Nmap", "WEBSDS").strip()
