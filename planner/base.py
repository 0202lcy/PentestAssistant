from typing import Optional, Union
from abc import ABC, abstractmethod

from retrieval import Retrieval
from model import ChatModel


class Plan:
    """A simple plan object for the Semantic Kernel"""

    def __init__(self, prompt: str, goal: str, generated_plan: Union[dict, str]):
        self.prompt = prompt
        self.goal = goal
        self.generated_plan = generated_plan

    def __str__(self):
        return f"Prompt: {self.prompt}\nGoal: {self.goal}\nPlan: {self.generated_plan}"

    def __repr__(self):
        return str(self)


class Planner(ABC):
    """A planner aim to retrieve similar api from specific database according to user query"""

    def __init__(self, chat_model: ChatModel, skill_name: str = None, reranker: Retrieval = None) -> None:
        self.skill_name = skill_name
        self.chat_model = chat_model
        self.reranker = reranker

    @abstractmethod
    def create_plan(self, goal: str) -> Optional[Plan]:
        pass

    @abstractmethod
    def execute_plan(self, plan: Plan) -> str:
        pass
