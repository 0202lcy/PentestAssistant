"""A basic str-based planner for the Python Semantic Kernel"""
from typing import Tuple

from log import logger
from planner.base import Plan, Planner

PROMPT = """
You are a planning robot proficient in Web penetration testing knowledge.  
Your task is to determine, based on your understanding of penetration testing objectives, whether the user's [objective] requires the use of the NMAP tool, CMSeek tool, Dirsearch tool, Hydra tool, Sqlmap tool, Tplmap tool, XSStrike tool, or just analysis and summary.  

- If none of the above tools are required, output "0".  
- If the NMAP tool is required, output "1".  
- If the CMSeek tool is required, output "2".  
- If the Dirsearch tool is required, output "3".  
- If the Hydra tool is required, output "4".  
- If the Sqlmap tool is required, output "5".  
- If the Tplmap tool is required, output "6".  
- If the XSStrike tool is required, output "7".  

Do not output anything other than "0", "1", "2", "3", "4", "5", "6", "7". Stop output immediately after completing the task.  

Below are two examples:  

[Objective]  
Help me scan the ports of www.baidu.com and check for SQL vulnerabilities.  
[Output]  
5  

[Objective]  
Can you check if there are XSS vulnerabilities in the web service at 172.20.0.59:11453?  
[Output]  
7  

End of examples. Real application begins below:  

[Objective]  
{input}  
[Output]  

"""


class CapChecker(Planner):

    def __init__(self, chat_model, skill_name=None, reranker=None):
        super().__init__(chat_model, skill_name, reranker)

    def create_plan(self, goal: str) -> Tuple[int, Plan]:
        logger.info(f": CapChecker input- {repr(goal)}")

        # Create the context for the planner
        prompt = PROMPT.format(input=goal)
        response = self.chat_model.chat(prompt)

        return 0, Plan(prompt=PROMPT, goal=goal, generated_plan=response)

    def execute_plan(self, plan: Plan) -> str:
        return int(plan.generated_plan)
