from agent.base import Agent
from model.base import ChatModel
from config import config_manager
from retrieval import Retrieval, BgeReranker
from planner import NmapPlanner, CmseekPlanner, DirsearchPlanner, \
    HydraPlanner, SqlmapPlanner, TplmapPlanner, XsstrikePlanner, CapChecker


class ExecutorAgent(Agent):

    def __init__(self, chat_model: ChatModel) -> None:
        self.chat_model = chat_model
        self.retrieval_model = self._read_retrieval_model()
        self.nmap_planner = NmapPlanner(chat_model=self.chat_model, skill_name="Nmap", reranker=self.retrieval_model)
        self.cmseek_planner = CmseekPlanner(chat_model=self.chat_model, skill_name="CMSeek")
        self.dirsearch_planner = DirsearchPlanner(chat_model=self.chat_model, skill_name="Dirsearch")
        self.hydra_planner = HydraPlanner(chat_model=self.chat_model, skill_name="Hydra")
        self.sqlmap_planner = SqlmapPlanner(chat_model=self.chat_model, skill_name="Sqlmap")
        self.tplmap_planner = TplmapPlanner(chat_model=self.chat_model, skill_name="Tplmap")
        self.xsstrike_planner = XsstrikePlanner(chat_model=self.chat_model, skill_name="XSStrike")
        self.capability_checker = CapChecker(chat_model=self.chat_model)

    def _read_retrieval_model(self) -> Retrieval:
        reranker_name_or_path = config_manager.config["Retrieval"]["reranker_path"]
        retrieval_model = BgeReranker(embedding_name_or_path=reranker_name_or_path, use_fp16=True)
        return retrieval_model

    def _exec_nmap_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute Nmap tool")
        _, plan = self.nmap_planner.create_plan(query)
        result = self.nmap_planner.execute_plan(plan)
        return result

    def _exec_cmseek_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute Cmseek tool")
        self._print_tool_message(f"🐎 执行 Cmseek 工具中")
        _, plan = self.cmseek_planner.create_plan(query)
        result = self.cmseek_planner.execute_plan(plan)
        return result

    def _exec_dirsearch_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute Dirsearch tool")
        _, plan = self.dirsearch_planner.create_plan(query)
        result = self.dirsearch_planner.execute_plan(plan)
        return result

    def _exec_hydra_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute hydra tool")
        _, plan = self.hydra_planner.create_plan(query)
        result = self.hydra_planner.execute_plan(plan)
        return result

    def _exec_sqlmap_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute Sqlmap tool")
        _, plan = self.sqlmap_planner.create_plan(query)
        result = self.sqlmap_planner.execute_plan(plan)
        return result

    def _exec_tplmap_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute Tplmap tool")
        _, plan = self.tplmap_planner.create_plan(query)
        result = self.tplmap_planner.execute_plan(plan)
        return result

    def _exec_xsstrike_tool(self, query: str) -> str:
        self._print_tool_message(f"🐎 Execute XSStrike tool")
        _, plan = self.xsstrike_planner.create_plan(query)
        result = self.xsstrike_planner.execute_plan(plan)
        return self.xsstrike_planner.skill_name + " result:" + result

    def _exec_tool(self, query: str, capability_checker_result: int) -> str:
        result = ""
        if capability_checker_result == 1:
            result = self._exec_nmap_tool(query)
        elif capability_checker_result == 2:
            result = self._exec_cmseek_tool(query)
        elif capability_checker_result == 3:
            result = self._exec_dirsearch_tool(query)
        elif capability_checker_result == 4:
            result = self._exec_hydra_tool(query)
        elif capability_checker_result == 5:
            result = self._exec_sqlmap_tool(query)
        elif capability_checker_result == 6:
            result = self._exec_tplmap_tool(query)
        elif capability_checker_result == 7:
            result = self._exec_xsstrike_tool(query)

        # if result is "", raise error
        return result

    def _exec_capability_check(self, query: str) -> str:
        _, plan = self.capability_checker.create_plan(query)
        result = self.capability_checker.execute_plan(plan)
        return result

    def _print_tool_message(self, msg: str):
        print(f"\033[32m{msg}\033[0m")

    def process(self, query: str) -> str:
        capability_checker_result = self._exec_capability_check(query)
        if capability_checker_result == 0:
            return "According to the user's request, no suitable tool was found to complete the task"

        exec_result = self._exec_tool(query, capability_checker_result)

        return exec_result
