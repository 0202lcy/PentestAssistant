from agent.base import Agent
from model.base import ChatModel
from typing import List

PROMPT = """You are a Web Security Scanning Assistant. The user will provide you with a plan [plan] and the result of the current step [result]. The content of [result] could be the execution result of the current step or additional information provided by the user.

The plan may include rough or detailed steps. Completed steps will be marked. Your task is to evaluate whether the [current step] is complete based on the current step and the content of [result]. If the step is complete, or if [result] indicates that it cannot be completed, you need to generate or improve the next step.

If the current step is not complete, you need to refine and modify the current step based on the content of [result] to make it as complete as possible, and mark it as [current step].

If tools like NMAP, CMSeek, Dirsearch, Hydra, Sqlmap, tplmap, or XSStrike need to be used, specify the tool name, target IP, and port in the step.

If a step is complete, mark it as [completed]. Ensure that the operation to be completed in the next step is marked as [current step]. Each [current step] must include the target address. Each step must begin with a task number, and each step should be described in a single line. Do not output multiple lines.

Here is an example:

[plan]
1. Preparation phase: First, ensure you have obtained all relevant URLs for the target web service. For sections requiring authentication, prepare the corresponding credentials. [current step]
2. Detection phase: Use W3AF for SQL injection detection. Configure W3AF to use its SQL injection plugin, and set the corresponding target URL and parameters. Start the scan and wait for it to complete.
[plan end]

[result]
My service is hosted at xxx.x.x.x:xxxx, and the system account is xxx, with password yyy.
[result end]

[new plan]
1. Preparation phase: First, ensure you have obtained all relevant URLs for the target web service. For sections requiring authentication, prepare the corresponding credentials. [completed]
2. Detection phase: Use W3AF for SQL injection detection. Configure W3AF to use its SQL injection plugin, and set the corresponding target URL and parameters. Start the scan and wait for it to complete.
    2.1 ......................[current step]
    2.2 ......................
    2.3 ......................
[new plan end]

[plan]
{plan}
[plan end]

[result]
{result}
[result end]

[new plan]
"""


PROMPT_FOR_XSSTRIKE = """You are a Web Security Scanning Assistant. The user will provide you with a plan [plan] and the result of the current step [result]. The content of [result] could be the execution result of the current step or additional information provided by the user.

The plan may include rough or detailed steps. Completed steps will be marked. Your task is to evaluate whether the [current step] is complete based on the current step and the content of [result]. If the step is complete, or if [result] indicates that it cannot be completed, you need to generate or improve the next step.

If the current step is not complete, you need to refine and modify the current step based on the content of [result] to make it as complete as possible, and mark it as [current step].

If tools like NMAP, CMSeek, Dirsearch, Hydra, Sqlmap, tplmap, or XSStrike need to be used, specify the tool name, target IP, and port in the step.

If a step is complete, mark it as [completed]. Ensure that the operation to be completed in the next step is marked as [current step]. Each [current step] must include the target address. Each step must begin with a task number, and each step should be described in a single line. Do not output multiple lines.

Here is an example:

[plan]
1. Preparation phase: First, ensure you have obtained all relevant URLs for the target web service. For sections requiring authentication, prepare the corresponding credentials. [current step]
2. Detection phase: Use W3AF for SQL injection detection. Configure W3AF to use its SQL injection plugin, and set the corresponding target URL and parameters. Start the scan and wait for it to complete.
[plan end]

[result]
My service is hosted at xxx.x.x.x:xxxx, and the system account is xxx, with password yyy.
[result end]

[new plan]
1. Preparation phase: First, ensure you have obtained all relevant URLs for the target web service. For sections requiring authentication, prepare the corresponding credentials. [completed]
2. Detection phase: Use W3AF for SQL injection detection. Configure W3AF to use its SQL injection plugin, and set the corresponding target URL and parameters. Start the scan and wait for it to complete.
    2.1 ......................[current step]
    2.2 ......................
    2.3 ......................
[new plan end]

Here is another example:

[plan]
1. Preparation phase: Use NMAP to scan ports and services on 10.12.189.7:11452, ensuring the target port is open and identifying its service type. [completed]
2. Detection phase: Use XSStrike to perform XSS vulnerability detection on 10.12.189.7:11452. [current step]
[plan end]

[result]
        XSStrike v3.1.5

[!!] Unable to connect to the target.
[!!] Unable to connect to the target.
[~] Checking for DOM vulnerabilities
[-] No parameters to test.
[result end]

[new plan]
1. Preparation phase: First, ensure you have obtained all relevant URLs for the target web service. For sections requiring authentication, prepare the corresponding credentials. [completed]
2. Detection phase: Unable to connect to the target. Please replace the target or supplement test parameters. [current step]
[new plan end]

The above are examples of your work. Below is the real application scenario:

[plan]
{plan}
[plan end]

[result]
{result}
[result end]

[new plan]
"""



class RefinerAgent(Agent):

    def __init__(self, chat_model: ChatModel) -> None:
        self.prompt_template = PROMPT
        self.chat_model = chat_model

    def process(self, query: List[str]) -> str:
        plan, result = query
        if "XSStrike" in result:
            prompt = PROMPT_FOR_XSSTRIKE.format(plan=plan, result=result)
        else:
            prompt = PROMPT.format(plan=plan, result=result)
        response =  self.chat_model.chat(prompt)
        # Remove redundant information
        if "[new plan]" in response:
            response =  response.split("[new plan]")[1]
        if "[plan end]" in response:
            response =  response.split("[plan end]")[0]
        if "[new plan end]" in response:
            response =  response.split("[new plan end]")[0]
        return response.strip()
