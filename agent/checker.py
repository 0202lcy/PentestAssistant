from agent.base import Agent
from model.base import ChatModel
from log import logger

PLAN_PROMPT = """You are a Web Security Scanning Assistant with expertise in using tools like NMAP, W3AF, CMSeek, Dirsearch, Hydra, Sqlmap, tplmap, and XSStrike. You also have knowledge of penetration testing and analytical skills.
Your task is to determine whether a step can be completed using the abilities mentioned above. The steps will be provided in the format [user input]xxxxx[user input end], and you need to provide your judgment in the format [result]xxx. If the step cannot be fully completed or involves manual processes, output "manu." If the step can be completed using the penetration testing tools mentioned above, output "auto." If the step can be completed using your analytical skills, output "anal."
Your first requirement is to avoid outputting any additional content—only output "manu," "auto," or "anal." Below is an example:

[user input]
Use Nmap to determine if SQL injection vulnerabilities exist on 127.0.0.1.
[user input end]
[result]
auto

If manual intervention is required, here’s an example:
[user input]
Confirm the target IP and port range for the Nmap scan.
[user input end]
[result]
manu

[user input]
Review the vulnerability locations and details mentioned in the XSStrike report.
[user input end]
[result]
anal

Strictly follow the instructions above and output only "manu," "auto," or "anal." Do not output anything other than these three words. Immediately stop outputting after providing the result. Below is the real application scenario:

[user input]
{userinput}
[user input end]

[result]
"""



PARAM_PROMPT = """You are a Task Status Analysis Assistant responsible for determining whether a task has been successfully completed based on the task's return status code and related task information. If a task fails, you need to explain the reason for failure and suggest possible solutions. Please use the following status codes and task information to make your judgment:

**Status Codes and Corresponding Information:**
0: Task successfully executed.
-1: Parameter error when creating the function.
-2: Incorrect function name when creating the function.
-3: Format error when creating the function.
-4: Failed to complete function creation.
-10: Function call execution failed.
-11: Translation failed during function execution.
-12: Summary generation failed during function execution.
-20: Query check failed.
-21: Robot status check failed.
-22: Domain does not exist error.
-23: Capability check failed.

**Important Note:** A status code of 0 only indicates that the task was successfully executed, but it does not guarantee that the execution result is valid. If you determine that the task has failed or the result is invalid based on the task information, you should return "task failed" instead of "task succeeded."

**Input Format:**
- **Status Code:** An integer representing the task return status.
- **Task Information:** A string describing details related to the task.

**Output Requirements:**
- **Task Success:** If the status code is 0, output "Task successfully completed."
- **Task Failure:** If the task fails, explain the specific reason for failure based on the status code and task information, and provide possible solutions.

**Example:**
Input:

Status Code: -1  
Task Information: Parameter format did not meet requirements during function creation.  

Output:

Task failed. Reason: Parameter error when creating the function. Possible solution: Please check the format of the input parameters and ensure all necessary parameters are provided.

Below is the real application scenario:  
Input:  

Status Code: {code}  
Task Information: {msg}  
Output:
"""




class PlanCheckerAgent(Agent):

    def __init__(self, chat_model: ChatModel) -> None:
        self.chat_model = chat_model

    def process(self, query: str) -> str:
        prompt = PLAN_PROMPT.format(userinput=query)
        response = self.chat_model.chat(prompt)
        logger.info(f"PlanChecker output - {response.strip()}")
        return response


class ParamCheckerAgent(Agent):

    def __init__(self, chat_model: ChatModel) -> None:
        self.chat_model = chat_model

    def process(self, query: str) -> str:
        code, msg = query
        prompt = PARAM_PROMPT.format(code=code, msg=msg)
        response = self.chat_model.chat(prompt)
        logger.info(f"ParamChecker output - {response.strip()}")
        return response
