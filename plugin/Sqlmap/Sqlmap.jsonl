{"name": "sql_injection", "description": "Detect SQL injection vulnerabilities", "args": [{"name": "target", "description": "Database address"}], "exec_str": "sqlmap -u '{{target}}' --batch"}
{"name": "sql_injection_database", "description": "Detect SQL injection vulnerabilities in specified databases", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}], "exec_str": "sqlmap -u '{{target}}' --dbms='{{database}}' --batch"}
{"name": "sql_injection_level", "description": "SQL injection vulnerabilities are detected with different levels of detection", "args": [{"name": "target", "description": "Database address"}, {"name": "level", "description": "Scan on a scale of five levels, from 1-5"}], "exec_str": "sqlmap -u '{{target}}' --level '{{level}}' --batch"}
{"name": "sql_injection_User_Agent", "description": "Use the --user-agent parameter to set a custom User-Agent. User-Agent is a header field in an HTTP request that identifies the client information that sent the request", "args": [{"name": "target", "description": "Database address"}, {"name": "User_Agent", "description": "User-Agent is a header field in an HTTP request that identifies the client information that sent the request"}], "exec_str": "sqlmap -u '{{target}}' --User-Agent='{{User_Agent}}' --batch"}
{"name": "sql_injection_tamper", "description": "The –tamper parameter can be used to avoid sensitive character filtering and WAF rules to a certain extent, and then carry out infiltration attacks. ", "args": [{"name": "target", "description": "Database address"}, {"name": "tamper", "description": "The --tamper parameter is used to bypass Web Application Firewalls (WAFs) or Intrusion Detection/Prevention Systems (IDS/IPS) by modifying SQL injection payloads."}], "exec_str": "sqlmap -u '{{target}}' --tamper '{{tamper}}' --batch"}
{"name": "sql_injection_technique", "description": "The –technique parameter can be used to specify the type of SQL injection to be tested, and by default, sqlmap tests all injection types. If you want to specify a certain type of test, you can use –technique.", "args": [{"name": "target", "description": "Database address"}, {"name": "technique", "description": "For each type, sqlmap provides letter options, which can be combined to specify multiple injection types for testing. B: Boolean-based blinds,E: Error-based,U: based on federated queries,S: stacked query,T: Time-based blinds,Q: Inline query"}], "exec_str": "sqlmap -u '{{target}}' --technique '{{technique}}' --batch"}
{"name": "sql_injection_p", "description": "Use the -p parameter to specify the injection point (parameter) to be tested", "args": [{"name": "target", "description": "Database address"}, {"name": "p", "description": "Replace the injection point with the name of the specific parameter you want to test. By specifying the -p parameter, sqlmap will perform SQL injection tests specifically on that parameter."}], "exec_str": "sqlmap -u '{{target}}' --p '{{p}}' --batch"}
{"name": "sql_injection_user", "description": "View the current user of the database", "args": [{"name": "target", "description": "Database address"}], "exec_str": "sqlmap -u '{{target}}' --current-user --batch"}
{"name": "sql_injection_database", "description": "View the current database", "args": [{"name": "target", "description": "Database address"}], "exec_str": "sqlmap -u '{{target}}' --current-db --batch"}
{"name": "sql_injection_tables", "description": "View the tables of the specified database", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}], "exec_str": "sqlmap -u '{{target}}' -D '{{database}}' --tables --batch"}
{"name": "sql_injection_columns", "description": "View the columns of a specified table in a specified database", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}, {"name": "table", "description": "Specify the table to be scanned"}], "exec_str": "sqlmap -u '{{target}}' -D '{{database}}' -T '{{table}}' --columns --batch"}
{"name": "sql_injection_data", "description": "View the data of the specified column of the specified table in the specified database", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}, {"name": "table", "description": "Specify the table to be scanned"}, {"name": "columns", "description": "Specify the columns to be scanned"}], "exec_str": "sqlmap -u '{{target}}' -D '{{database}}' -T '{{table}}' -C '{{columns}}' --dump --batch"}
{"name": "sql_injection_dump_all", "description": "View all data in the database", "args": [{"name": "target", "description": "Database address"}], "exec_str": "sqlmap -u '{{target}}' --dump-all --batch"}
{"name": "sql_injection_dump_all_database", "description": "View all data in the specified database", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}], "exec_str": "sqlmap -u '{{target}}' -D '{{database}}' --dump-all --batch"}
{"name": "sql_injection_dump_all_table", "description": "View all data in the specified table in the specified database", "args": [{"name": "target", "description": "Database address"}, {"name": "database", "description": "Specify the database to be scanned(mysql、PostgreSQL etc.)"}, {"name": "table", "description": "Specify the table to be scanned"}], "exec_str": "sqlmap -u '{{target}}' -D '{{database}}' -T '{{table}}' --dump-all --batch"}
