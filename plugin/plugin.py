import os
import json
from typing import List


class Parameter:
    name: str
    description: str

    def __init__(self, data: dict) -> None:
        self.name = data["name"]
        self.description = data["description"]


class Function:
    name: str
    description: str
    parameters: List[Parameter]
    exec_str: str

    def __init__(self, data: dict) -> None:
        self.name = data["name"]
        self.description = data["description"]
        self.exec_str = data["exec_str"]
        self.parameters = []
        for arg in data["args"]:
            self.parameters.append(Parameter(arg))


class Skill:
    functions: List[Function]

    def __init__(self, data: List[str]) -> None:
        self.functions = []
        for item in data:
            item = json.loads(item)
            self.functions.append(Function(item))

    def get_function(self, name: str) -> Function:
        for function in self.functions:
            if function.name == name:
                return function

        return None


class Plugin:

    def __init__(self) -> None:
        self.plugin_dir = os.path.dirname(__file__)

    def read_skill(self, skill_name: str) -> Skill:
        skill_file_path = os.path.join(self.plugin_dir, skill_name ,f"{skill_name}.jsonl")

        if not os.path.exists(skill_file_path):
            return []

        with open(skill_file_path, "r") as fp:
            lines = fp.readlines()

        return Skill(lines)
