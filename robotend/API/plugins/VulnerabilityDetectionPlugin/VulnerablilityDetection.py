from semantic_kernel.skill_definition import (sk_function,
                                              sk_function_context_parameter)
from semantic_kernel.orchestration.sk_context import SKContext


class VulnerabilityDetection:

    @sk_function(
        description=
        "SQL injection vulnerabilities detection, including regular SQL injection, Blind SQL injection, NOSQL injection, and supports various databases.",
        name="sql_injection",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def sql_injection(self, context: SKContext) -> str:
        return "sql_injection"

    @sk_function(
        description=
        "XSS (Cross-Site Scripting) vulnerability detection, including various triggering mechanisms and types, like reflection XSS or stroage XSS.",
        name="xss",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def xss(self, context: SKContext) -> str:
        return "xss"

    @sk_function(
        description=
        "Code injection and command-line injection vulnerabilities detection. This includes remote execution of user-defined code or programs, allowing users to perform any operation or even obtain a shell.",
        name="code_and_command_injection",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def code_and_command_injection(self, context: SKContext) -> str:
        return "code_and_command_injection"

    @sk_function(
        description=
        "XML-related vulnerabilities, including XPATH-related and XML entity-related vulnerabilities.",
        name="xml_related",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def xml_related(self, context: SKContext) -> str:
        return "xml_related"

    @sk_function(
        description=
        "File, directory, and path vulnerabilities on server side, such as remote file inclusion, upload, and path traversal.",
        name="file_and_directory",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def file_and_directory(self, context: SKContext) -> str:
        return "file_and_directory"

    @sk_function(
        description=
        "Source code-related vulnerabilities, such as source code leakage.",
        name="source_code",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def source_code(self, context: SKContext) -> str:
        return "source_code"

    @sk_function(
        description=
        "Vulnerabilities related to server misconfigurations, such as SSL, DAV, or server version information.",
        name="server_misconfiguration",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def server_misconfiguration(self, context: SKContext) -> str:
        return "server_misconfiguration"

    @sk_function(
        description=
        "Authorization and authentication-related vulnerabilities, including user login, cookie, and encryption.",
        name="authorization",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def authorization(self, context: SKContext) -> str:
        return "authorization"

    @sk_function(
        description=
        "Sensitive information leakage, including some common files, source code, directories, and framework information.",
        name="information_leak",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def information_leak(self, context: SKContext) -> str:
        return "information_leak"

    @sk_function(
        description=
        "Vulnerabilities related to HTTP protocol configurations or logic errors, such as request methods, request headers, and policies.",
        name="http_related",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def http_related(self, context: SKContext) -> str:
        return "http_related"

    @sk_function(
        description=
        "Any injection-related vulnerabilities, including SQL Injection, LDAP Injection, XPATH Injection, etc.",
        name="injection_related",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def injection_related(self, context: SKContext) -> str:
        return "injection_related"

    @sk_function(
        description="Any PHP-related vulnerabilities.",
        name="php_related",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def php_related(self, context: SKContext) -> str:
        return "php_related"

    @sk_function(
        description="Buffer overflow vulnerabilities.",
        name="buffer_overflow",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def buffer_overflow(self, context: SKContext) -> str:
        return "buffer_overflow"

    @sk_function(
        description=
        "Include the most common vulnerability scanning combinations.",
        name="generic",
    )
    @sk_function_context_parameter(
        description="scan ip or url address",
        name="target",
    )
    def generic(self, context: SKContext) -> str:
        return "generic"
