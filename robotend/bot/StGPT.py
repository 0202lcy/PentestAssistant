import re
from typing import Union

import semantic_kernel as sk

from log import logger
from bot import bot_state, StateEnum, ReturnCodeEnum, ProgressEnum, TaskEnum
from config.add_completion_service import add_completion_service
from planner import NmapPlanner, VulnerabilityPlanner, CmseekPlanner, DirsearchPlanner, HydraPlanner, SqlmapPlanner, TplmapPlanner, XsstrikePlanner, TranslatePlanner, SummaryPlanner, CapChecker, AnalyzePlanner
from plugins.NmapPlugin.Nmap import Nmap
from plugins.VulnerabilityDetectionPlugin.VulnerablilityDetection import VulnerabilityDetection
from plugins.CMSeekPlugin.Cmseek import Cmseek
from plugins.DirsearchPlugin.Dirsearch import Dirsearch
from plugins.HydraPlugin.Hydra import Hydra
from plugins.SqlmapPlugin.Sqlmap import Sqlmap
from plugins.TplmapPlugin.Tplmap import Tplmap
from plugins.XSStrikePlugin.Xsstrike import XSStrike
from retrieval import BgeReranker


class StGPT:

    def __init__(self, reranker_name_or_path: str) -> None:
        self.kernel = sk.Kernel()
        # self.kernel.add_completion_service()
        add_completion_service(self.kernel)
        self.nmap_planner = NmapPlanner(self.kernel, skill_name="Nmap", reranker=BgeReranker(reranker_name_or_path))
        self.vulnerability_planner = VulnerabilityPlanner(self.kernel, skill_name="VulnerabilityDetection")
        self.cmseek_planner = CmseekPlanner(self.kernel, skill_name="Cmseek")
        self.dirsearch_planner = DirsearchPlanner(self.kernel, skill_name="Dirsearch")
        self.hydra_planner = HydraPlanner(self.kernel, skill_name="Hydra")
        self.sqlmap_planner = SqlmapPlanner(self.kernel, skill_name="Sqlmap", reranker=BgeReranker(reranker_name_or_path))
        self.tplmap_planner = TplmapPlanner(self.kernel, skill_name="Tplmap", reranker=BgeReranker(reranker_name_or_path))
        self.xsstrike_planner = XsstrikePlanner(self.kernel, skill_name="xsstrike", reranker=BgeReranker(reranker_name_or_path))
        self.translate_planner = TranslatePlanner(self.kernel, skill_name="")
        self.summary_planner = SummaryPlanner(self.kernel, skill_name="")
        self.capchecker = CapChecker(self.kernel, skill_name="")
        self.analyze_planner = AnalyzePlanner(self.kernel, skill_name="")
        self.nmap_plan = None
        self.vulnerability_plan = None
        self.cmseek_plan = None
        self.dirsearch_plan = None
        self.hydra_plan = None
        self.sqlmap_plan = None
        self.tplmap_plan = None
        self.xsstrike_plan = None
        logger.info(": Start StGPT Service")

    def import_skill(self) -> None:
        self.kernel.import_skill(VulnerabilityDetection(), "VulnerabilityDetection")
        self.kernel.import_skill(Nmap(), "Nmap")
        self.kernel.import_skill(Cmseek(), "Cmseek")
        self.kernel.import_skill(Dirsearch(), "Dirsearch")
        self.kernel.import_skill(Hydra(), "Hydra")
        self.kernel.import_skill(Sqlmap(), "Sqlmap")
        self.kernel.import_skill(Tplmap(), "Tplmap")
        self.kernel.import_skill(XSStrike(), "xsstrike")


    def check_addr(self, query: str) -> bool:
        ip_pattern = "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])"
        url_pattern = "((http|https)://)?[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(:[0-9]{1,5})?(/[a-zA-Z0-9\\-\\._\\?\\,'/\\\\+&%\\$#\\=~]*)?"
        if re.search(ip_pattern, query) or re.search(url_pattern, query):
            return True
        return False

    async def exec_translate_async(self, query: str) -> Union[int, str]:
        try:
            plan = await self.translate_planner.create_plan_async(query)
            result = await self.translate_planner.execute_plan_async(plan)
        except:
            return ReturnCodeEnum.EXEC_TRANSLATE_FAIL, "翻译结果生成计划失败。"
        return 0, result

    async def exec_vulnerability_detection_async(self, query: str) -> Union[int, str]:
        error_message, plan = await self.vulnerability_planner.create_plan_async(query)
        if len(error_message) != 0:
            return ReturnCodeEnum.CREATE_FUNCTION_FORMAT_FAIL, error_message

        result = await self.vulnerability_planner.execute_plan_async(plan)
        return 0, result
    
    async def exec_cmseek_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.cmseek_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.cmseek_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.cmseek_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result

    async def exec_dirsearch_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.dirsearch_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.dirsearch_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.dirsearch_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result
    async def exec_hydra_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.hydra_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.hydra_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.hydra_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result
    async def exec_sqlmap_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.sqlmap_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.sqlmap_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.sqlmap_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result
    async def exec_tplmap_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.tplmap_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.tplmap_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.tplmap_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result
    async def exec_xsstrike_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.xsstrike_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.xsstrike_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.xsstrike_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result

    async def exec_check_capability(self, query: str) -> bool:  #0 represent imcapable, 1 means capable
        try:
            plan = await self.capchecker.create_plan_async(query)
            result = await self.capchecker.execute_plan_async(plan)
        except:
            return ReturnCodeEnum.CHECK_CAP_FAIL, "需求检测生成计划失败。"
        return result

    async def exec_analyze_async(self, query: str) -> bool:
        return_code, plan = await self.analyze_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.analyze_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.analyze_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result

    async def exec_nmap_async(self, query: str, exec: bool) -> Union[int, str]:
        return_code, plan = await self.nmap_planner.create_plan_async(query)
        bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
        self.nmap_plan = plan
        if return_code != 0:
            return return_code, ""

        result = await self.nmap_planner.execute_plan_async(plan, exec)
        bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                            return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(result) == 0 else 0,
                            task=TaskEnum.TRANSLATE_PLAN)
        if len(result) == 0:
            return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

        return 0, result

    async def generate_async(self, query: str) -> Union[int, str]:
        bot_state.reset_state()

        if bot_state.state != StateEnum.IN_PROGRESS:
            if not self.check_addr(query):
                bot_state.set_state(progress=0, return_code=ReturnCodeEnum.CHECK_QUERY_FAIL, task=TaskEnum.STOP)
                # return ReturnCodeEnum.CHECK_QUERY_FAIL, "您好，我是 Web 安全扫描机器人，可以试试这么问：\n①：请帮我对172.20.0.59:11452端口进行TCP端口扫描确认该端口是否开启，并执行xss漏洞检测\n②：请帮我对222.20.126.167执行TCP端口扫描\n目前仅支持NMAP工具以及w3af、arachni、zaproxy的13类功能(xss、sql、xml等)\n\n*提问需要表明扫描意图和目标地址哦~"
                return ReturnCodeEnum.CHECK_QUERY_FAIL, "提问需要表明扫描意图和目标地址哦~"

            result = ""
            cap_check_result_string = await self.exec_check_capability(query)
            try:
                cap_check_result = int(cap_check_result_string.strip())
            except:
                return ReturnCodeEnum.CHECK_CAP_FAIL, "调用过多，请稍后再试"
            if not cap_check_result:
                bot_state.set_state(progress=0, return_code=ReturnCodeEnum.CHECK_QUERY_FAIL, task=TaskEnum.STOP)
                return ReturnCodeEnum.CHECK_CAP_FAIL, "非常抱歉，我目前支持资产探测，服务发现，以及WEB漏洞扫描功能，您的需求我目前暂时无法实现~"
            # log_info = ["不执行NMAP工具和漏洞检测工具", "执行NMAP工具", "执行漏洞检测工具", "执行NMAP工具和漏洞检测工具"]
            if cap_check_result <= 0 or cap_check_result > 8:
                logger.info(f"需求检测时模型回答错误。")
                return ReturnCodeEnum.CHECK_CAP_FAIL, "需求检测时模型回答错误。"
            logger.info(f": 需求检测结果 - {cap_check_result}")
            # 执行nmap
            if (cap_check_result == 1):
                return_code, nmap_result = await self.exec_nmap_async(query, exec=True)
                result = nmap_result
                logger.info(f": NMAP工具执行结果 - {repr(result)}")
                if return_code != 0:
                    return return_code, ""
            # 执行w3af
            if (cap_check_result == 2):
                return_code, vulnerability_detection_result = await self.exec_vulnerability_detection_async(query)
                result = vulnerability_detection_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, vulnerability_detection_result
            # 使用CMSeek
            if (cap_check_result == 3):
                return_code, cmseek_result = await self.exec_cmseek_async(query, exec=True)
                result = cmseek_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, cmseek_result
            # 使用Dirsearch
            if (cap_check_result == 4):
                return_code, dirsearch_result = await self.exec_dirsearch_async(query, exec=True)
                result = dirsearch_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, dirsearch_result
            # 使用Hydra
            if (cap_check_result == 5):
                return_code, hydra_result = await self.exec_hydra_async(query, exec=True)
                result = hydra_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, hydra_result
            # 使用sqlmap
            if (cap_check_result == 6):
                return_code, sqlmap_result = await self.exec_sqlmap_async(query, exec=True)
                result = sqlmap_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, sqlmap_result
            # 使用tplmap
            if (cap_check_result == 7):
                return_code, tplmap_result = await self.exec_tplmap_async(query, exec=True)
                result = tplmap_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, tplmap_result
            # 使用xsstrike
            if (cap_check_result == 8):
                return_code, xsstrike_result = await self.exec_xsstrike_async(query, exec=True)
                result = xsstrike_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, xsstrike_result
            if (cap_check_result == 9):
                return_code, analyze_result = await self.exec_analyze_async(query, exec=True)
                result = analyze_result
                bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
                if return_code != 0:
                    return return_code, analyze_result
            return ReturnCodeEnum.SUCCESS, result


        elif bot_state.return_code == ReturnCodeEnum.CREATE_FUNCTION_PARAM_FAIL:
            return_code, plan = await self.nmap_planner.create_plan_for_completion_async(query, self.nmap_plan)
            bot_state.set_state(progress=ProgressEnum.CREATE_PLAN, return_code=return_code, task=TaskEnum.EXEC_PLAN)
            if return_code != 0:
                return return_code, ""

            nmap_result = await self.nmap_planner.execute_plan_async(plan, exec)
            bot_state.set_state(progress=ProgressEnum.EXEC_PLAN,
                                return_code=ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL if len(nmap_result) == 0 else 0,
                                task=TaskEnum.TRANSLATE_PLAN)
            if len(nmap_result) == 0:
                return ReturnCodeEnum.EXEC_FUNCTION_CALL_FAIL, ""

            return_code, vulnerability_detection_result = await self.exec_vulnerability_detection_async(query)
            bot_state.set_state(progress=ProgressEnum.TRANSLATE_PLAN, return_code=return_code, task=TaskEnum.STOP)
            if return_code != 0:
                return return_code, vulnerability_detection_result

            return ReturnCodeEnum.SUCCESS, vulnerability_detection_result

    async def summary_async(self, data: str) -> Union[int, str]:
        plan = await self.summary_planner.create_plan_async(data)
        result = await self.summary_planner.execute_plan_async(plan)
        return 0, result
