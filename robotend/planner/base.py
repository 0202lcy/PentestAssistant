from typing import Optional
from abc import ABC, abstractmethod

from semantic_kernel import Kernel

from retrieval import Retrieval


class Plan:
    """A simple plan object for the Semantic Kernel"""

    def __init__(self, prompt: str, goal: str, generated_plan: dict):
        self.prompt = prompt
        self.goal = goal
        self.generated_plan = generated_plan

    def __str__(self):
        return f"Prompt: {self.prompt}\nGoal: {self.goal}\nPlan: {self.generated_plan}"

    def __repr__(self):
        return str(self)


class Planner:

    def __init__(self,
                 kernel: Kernel,
                 skill_name: str,
                 reranker: Retrieval = None) -> None:
        self.kernel = kernel
        self.skill_name = skill_name
        self.reranker = reranker

    @abstractmethod
    async def create_plan_async(self, goal: str) -> Optional[Plan]:
        pass

    @abstractmethod
    async def execute_plan_async(self, plan: Plan) -> str:
        pass
