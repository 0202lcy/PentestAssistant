from enum import Enum
from pydantic import BaseModel


class ProgressEnum(int, Enum):
    """
    stop: 0
    create plan: 30
    exec plan: 70
    translate plan: 100
    """
    STOP = 0
    CREATE_PLAN = 30
    EXEC_PLAN = 70
    TRANSLATE_PLAN = 100


class ReturnCodeEnum(int, Enum):
    """
    success: 0
    check function fail: -1 ~ -10
    exec function fail: -10 ~ -20
    chore fail: -20 ~ -30
    """
    SUCCESS = 0

    # create function
    CREATE_FUNCTION_PARAM_FAIL = -1
    CREATE_FUNCTION_NAME_FAIL = -2
    CREATE_FUNCTION_FORMAT_FAIL = -3
    COMPLETION_FUNCTION_FAIL = -4

    # exec function
    EXEC_FUNCTION_CALL_FAIL = -10
    EXEC_TRANSLATE_FAIL = -11
    EXEC_SUMMARY_FAIL = -12

    # chore fail
    CHECK_QUERY_FAIL = -20
    CHECK_BOT_STATE_FAIL = -21
    DOMAIN_NOT_EXIST_FAIL = -22
    CHECK_CAP_FAIL = -23


class StateEnum(str, Enum):
    IN_PROGRESS = "进行中"
    SUCCESS = "成功"
    FAIL = "失败"
    STOP = "停止"


class TaskEnum(str, Enum):
    STOP = "停止"
    CREATE_PLAN = "基于大模型创建计划中"
    EXEC_PLAN = "执行计划，调用 WEBSDS"
    TRANSLATE_PLAN = "结果生成中"


class BotState(BaseModel):
    progress: int
    return_code: int
    task: TaskEnum
    state: StateEnum

    def set_state(self, progress: int, return_code: int, task: str) -> None:
        # when create function param error, user should completion params
        # so `state` should be IN_PROGRESS, not be `FAIL`
        if return_code == ReturnCodeEnum.CREATE_FUNCTION_PARAM_FAIL:
            self.progress = 70
            self.return_code = return_code
            self.task = TaskEnum.CREATE_PLAN
            self.state = StateEnum.IN_PROGRESS
            return

        self.progress = progress
        self.return_code = return_code
        self.task = task
        if return_code != 0:
            self.state = StateEnum.FAIL
        elif progress == 100:
            self.state = StateEnum.SUCCESS
        else:
            self.state = StateEnum.IN_PROGRESS

    def get_state(self) -> dict:
        return self.dict()

    def reset_state(self) -> None:
        if self.return_code == ReturnCodeEnum.CREATE_FUNCTION_PARAM_FAIL:
            self.task = TaskEnum.CREATE_PLAN
            return

        self.progress = 0
        self.return_code = 0
        self.task = TaskEnum.CREATE_PLAN
        self.state = StateEnum.STOP


bot_state = BotState(progress=0,
                     return_code=0,
                     task=TaskEnum.STOP,
                     state=StateEnum.STOP)
