from .WenxinBot import WenxinBot
from .QwenBot import QwenBot
from dotenv import dotenv_values

config = dotenv_values('.wenxinenv')
PROMPT = """你是一个渗透测试任务状态分析助手，负责根据渗透测试工具返回的状态码和任务信息，判断任务是否成功完成，并输出相关信息。如果任务失败，你需要解释失败原因，并给出可能的解决方案。请根据以下状态码和任务信息来提供判断：

状态码对应信息：
0: 任务成功执行。
-1: 创建函数时，参数错误。
-2: 创建函数时，函数名称错误。
-3: 创建函数时，格式错误。
-4: 创建函数完成失败。
-10: 执行函数调用失败。
-11: 执行函数时，翻译失败。
-12: 执行函数时，总结失败。
-20: 检查查询失败。
-21: 检查机器人状态失败。
-22: 域不存在错误。
-23: 检查能力失败。
注意，状态码为0只是表示任务成功执行，但是执行结果是否有效并不确定，如果包含漏洞信息或潜在风险说明任务成功完成。
输入格式：
状态码：整数，表示任务返回的状态。
任务信息：字符串，描述与任务相关的详细信息。
输出要求：
任务成功：如果你判断任务成功完成，输出“任务成功完成”。
任务失败：如果任务失败，依据状态码和任务信息，输出任务失败的具体原因和可能的解决方案。
示例：
输入：

状态码：-1
任务信息：函数创建时，参数格式不符合要求。
输出：

任务失败。原因：创建函数时参数错误。可能的解决方案：请检查输入的参数格式是否正确，并确保所有必要参数已提供。
下面是真实应用场景：
输入：

状态码：{$code$}
任务信息：{$msg$}
输出：
"""


class param_check:

    def __init__(self) -> None:
        # self.bot = WenxinBot()
        self.bot = QwenBot()
        # self.bot.get_access_token()
        self.prompt_template = PROMPT

    def make_prompt(self, code, msg):
        prompt = self.prompt_template.replace("{$code$}", code)
        prompt = prompt.replace("{$msg$}", msg)
        return prompt

    def query2bot(self, code, msg=""):
        query = self.make_prompt(str(code), msg)
        return self.bot.send_message(query)


if __name__ == '__main__':
    p = param_check()
    p.query2bot("0")
    # p.query2bot('检查127.0.0.1上是否存在sql注入问题')
